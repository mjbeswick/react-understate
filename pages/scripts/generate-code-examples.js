// Generate src/utils/codeExamples.ts by reading src/code-examples
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const srcDir = path.join(__dirname, '..', 'src', 'code-examples');
const outDir = path.join(__dirname, '..', 'src', 'utils');
const outTs = path.join(outDir, 'codeExamples.ts');
const outJson = path.join(outDir, 'code-examples.json');

function toExportName(filename) {
  const base = filename.replace(/\.(tsx?|jsx?)$/, '');
  // Convert dashes and dots to camelCase parts
  return base
    .split(/[^a-zA-Z0-9]+/)
    .filter(Boolean)
    .map((part, idx) =>
      idx === 0 ? part : part[0].toUpperCase() + part.slice(1),
    )
    .join('');
}

function generate() {
  if (!fs.existsSync(srcDir)) {
    console.error('code-examples directory not found:', srcDir);
    process.exit(1);
  }

  const files = fs
    .readdirSync(srcDir)
    .filter(f => /\.(ts|tsx|js|jsx)$/.test(f));

  // Deduplicate by base name, prefer TS over JS: tsx > ts > jsx > js
  const preference = { tsx: 4, ts: 3, jsx: 2, js: 1 };
  const byBase = new Map();
  for (const file of files) {
    const match = file.match(/\.(tsx?|jsx?)$/);
    const ext = match ? match[1] : 'ts';
    const base = file.replace(/\.(tsx?|jsx?)$/, '');
    const existing = byBase.get(base);
    if (!existing || preference[ext] > preference[existing.ext]) {
      byBase.set(base, { file, ext });
    }
  }

  const entries = Array.from(byBase.keys()).sort((a, b) => a.localeCompare(b));

  const tsLines = [];
  tsLines.push(
    '// This file is auto-generated by scripts/generate-code-examples.js',
  );
  tsLines.push('// Do not edit manually.');
  tsLines.push('');
  tsLines.push("import examples from './code-examples.json';");
  tsLines.push('');

  const jsonMap = {};

  for (const base of entries) {
    const { file } = byBase.get(base);
    const exportName = toExportName(base);
    const absPath = path.join(srcDir, file);
    const content = fs.readFileSync(absPath, 'utf8');
    jsonMap[exportName] = content;
    tsLines.push(
      `export const ${exportName}: string = (examples as any)['${exportName}'];`,
    );
  }
  tsLines.push('');

  fs.mkdirSync(outDir, { recursive: true });
  fs.writeFileSync(outJson, JSON.stringify(jsonMap, null, 2), 'utf8');
  fs.writeFileSync(outTs, tsLines.join('\n'), 'utf8');
  console.log(
    'Generated',
    outTs,
    'and',
    outJson,
    'with',
    entries.length,
    'exports',
  );
}

generate();
